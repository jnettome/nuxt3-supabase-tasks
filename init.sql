--
-- For use with:
-- https://github.com/supabase/supabase/tree/master/examples/todo-list/sveltejs-todo-list or
-- https://github.com/supabase/examples-archive/tree/main/supabase-js-v1/todo-list
--

create table boards (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  name text check (char_length(name) > 3),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table boards enable row level security;

create table board_columns (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  board_id bigint references boards(id) not null,
  name text check (char_length(name) > 3),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table board_columns enable row level security;

create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  board_id bigint references boards(id) not null,
  board_column_id bigint references board_columns(id) not null,
  position integer not null default 0,
  is_complete boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table todos enable row level security;


create policy "Individuals can create todos." on todos for
    insert with check (auth.uid() = user_id);
create policy "Individuals can view their own todos. " on todos for
    select using (auth.uid() = user_id);
create policy "Individuals can update their own todos." on todos for
    update using (auth.uid() = user_id);
create policy "Individuals can delete their own todos." on todos for
    delete using (auth.uid() = user_id);

create policy "Individuals can create boards." on boards for
    insert with check (auth.uid() = user_id);
create policy "Individuals can view their own boards. " on boards for
    select using (auth.uid() = user_id);
create policy "Individuals can update their own boards." on boards for
    update using (auth.uid() = user_id);
create policy "Individuals can delete their own boards." on boards for
    delete using (auth.uid() = user_id);

create policy "Individuals can create board_columns." on board_columns for
    insert with check (auth.uid() = user_id);
create policy "Individuals can view their own board_columns. " on board_columns for
    select using (auth.uid() = user_id);
create policy "Individuals can update their own board_columns." on board_columns for
    update using (auth.uid() = user_id);
create policy "Individuals can delete their own board_columns." on board_columns for
    delete using (auth.uid() = user_id);